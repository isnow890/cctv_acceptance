import 'package:cctv_acceptance/src/cctv/model/post_model.dart';
import 'package:cctv_acceptance/src/cctv/view/cctv_ok_screen.dart';
import 'package:cctv_acceptance/theme/component/bottom_sheet/setting_bottom_sheet.dart';
import 'package:cctv_acceptance/theme/component/button/button.dart';
import 'package:cctv_acceptance/theme/component/custom_border.dart';
import 'package:cctv_acceptance/theme/component/custom_text_form_field.dart';
import 'package:cctv_acceptance/theme/component/dialog/custom_save_dialog.dart';
import 'package:cctv_acceptance/theme/component/indicator/whole_circular_indicator.dart';
import 'package:cctv_acceptance/theme/component/segment_button.dart';
import 'package:cctv_acceptance/theme/layout/default_layout.dart';
import 'package:cctv_acceptance/theme/provider/theme_provider.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';

import '../../../theme/component/toast/toast.dart';

class CctvResponseScreen extends ConsumerStatefulWidget {
  const CctvResponseScreen({required this.respNo, Key? key}) : super(key: key);
  final String respNo;

  static String get routeName => 'cctv';

  @override
  ConsumerState<CctvResponseScreen> createState() => _CctvResponseScreenState();
}

class _CctvResponseScreenState extends ConsumerState<CctvResponseScreen> {
  bool agreeYesNo = true;
  int? agreeNoValue;
  bool _isBusy = false;

  final ScrollController _scrollController = ScrollController();

  TextStyle segmentTextStyle = const TextStyle(
    fontSize: 16.0,
    fontWeight: FontWeight.bold,
  );

  TextEditingController textController = TextEditingController();

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    _isBusy = true;

    // textController.text='기본텍스트';
  }

  void _scrollDown() {
    print(_scrollController.position.maxScrollExtent);
    _scrollController.animateTo(
      1000,
      duration: const Duration(milliseconds: 1000),
      curve: Curves.fastOutSlowIn,
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = ref.watch(themeServiceProvider);

    setState(() {
      _isBusy = false;
    });

    return WholeCircularIndicator(
        isBusy: _isBusy,
        child: DefaultLayout(
            scrollController: _scrollController,
            useSliver: true,
            title: Text(
              '수술장면 촬영 요청 알림',
              style: theme.typo.headline1.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            // canBack: true,
            actions: [
              Button(
                icon: 'option',
                type: ButtonType.flat,
                color: theme.color.text,
                onPressed: () {
                  showModalBottomSheet(
                    context: context,
                    builder: (context) {
                      return const SettingBottomSheet();
                    },
                  );
                },
              ),
            ],
            child: Padding(
              padding: const EdgeInsets.all(18.0),
              child: Column(
                children: [
                  const SizedBox(
                    height: 10,
                  ),
                  const SizedBox(
                    height: 20,
                  ),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        '아래환자가 수술장면 촬영요청을 신청하여 알려드립니다.',
                        style: theme.typo.subtitle1,
                      ),
                      const SizedBox(
                        height: 5,
                      ),
                      Text(
                        '촬영 허락 또는 거부사유를 기입하여 주시기 바랍니다.',
                        style: theme.typo.subtitle1
                            .copyWith(fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(
                        height: 5,
                      ),
                      Text(
                        '촬영을 거부하려는 경우 수술을 하기 전 반드시 촬영을 요청한 환자나 환자보호자에게 촬영거부사유를 설명해야 합니다. (의료법 38조의 2)',
                        style: theme.typo.subtitle1,
                      ),
                    ],
                  ),
                  const SizedBox(
                    height: 10,
                  ),
                  const SizedBox(
                    height: 10,
                  ),
                  CustomBorder(
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16.0),
                      child: Column(
                        children: [
                          const SizedBox(
                            height: 10,
                          ),
                          _renderSection(
                              title: '수술예정일시', value: '2023-07-23 10:48:48'),
                          const Divider(
                            height: 5,
                          ),
                          _renderSection(title: '등록번호', value: '10884537'),
                          const Divider(
                            height: 5,
                          ),
                          _renderSection(title: '요청구분', value: '촬영'),
                          const Divider(
                            height: 5,
                          ),
                          _renderSection(title: '응급여부', value: 'Y'),
                          const Divider(
                            height: 5,
                          ),
                          _renderSection(title: '요청일자', value: '2023-07-23'),
                          const SizedBox(
                            height: 10,
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(
                    height: 30,
                  ),
                  Text(
                    '위의 수술에 대한 촬영/녹음을 동의 하시겠습니까?',
                    style: theme.typo.headline4.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(
                    height: 20,
                  ),
                  SegmentButton(
                      selectionIndex: agreeYesNo ? 0 : 1,
                      onSegmentTapped: (selectedIndex) {
                        setState(() {
                          agreeYesNo = selectedIndex == 0 ? true : false;
                          _scrollDown();
                          if (agreeYesNo) {
                            print('agreeNoValue!');
                            agreeNoValue = null;
                          }
                        });
                      },
                      children: {
                        0: Text('예', style: segmentTextStyle),
                        1: Text(
                          '아니오',
                          style: segmentTextStyle,
                        ),
                      }),
                  const SizedBox(
                    height: 20,
                  ),
                  Visibility(
                    maintainAnimation: true,
                    maintainState: true,
                    visible: !agreeYesNo,
                    child: AnimatedOpacity(
                      duration: const Duration(seconds: 1),
                      curve: Curves.fastOutSlowIn,
                      opacity: !agreeYesNo ? 1 : 0,
                      child: _AgreeNoWidget(
                        agreeNoValue: agreeNoValue,
                        onChanged: (int? value) {
                          setState(() {
                            agreeNoValue = value;
                          });

                          _scrollDown();
                        },
                      ),
                    ),
                  ),
                  Visibility(
                    maintainAnimation: true,
                    maintainState: true,
                    visible: agreeNoValue == 4,
                    child: Column(children: [
                      const SizedBox(height: 20),
                      AnimatedOpacity(
                        duration: const Duration(seconds: 1),
                        curve: Curves.fastOutSlowIn,
                        opacity: agreeNoValue == 4 ? 1 : 0,
                        child: Align(
                          alignment: Alignment.topLeft,
                          child: Text(
                            '전공의의 수련을 현저히 저해할 우려가 있다고 판단하는 경우를 선택하셨습니다. 상세 사유를 입력해주세요.',
                            style: theme.typo.headline4.copyWith(
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(height: 20),
                      CustomTextFormField(
                        controller: textController,
                        hintText: '상세 사유를 입력해주세요.',
                        maxLines: 8,
                      ),
                      const SizedBox(
                        height: 15,
                      ),
                    ]),
                  ),
                  Button(
                    width: double.infinity,
                    onPressed: () async {
                      if (!agreeYesNo) {
                        if (agreeNoValue == null) {
                          Toast.show('동의안함 사유가 선택되지 않았습니다.');
                          return;
                        } else if (agreeNoValue == 4) {
                          if (textController.text.isEmpty) {
                            Toast.show('상세사유가 입력되지 않았습니다.');
                            return;
                          }
                          if (textController.text.length < 10) {
                            Toast.show('상세사유는 10자 이상 입력해주세요.');
                            return;
                          }
                        }
                      }

                      await showDialog(
                        context: context,
                        builder: (_) => CustomYesNoDialog(
                          dialogTitle: '제출 확인',
                          content: '응답을 제출하시겠습니까?',
                          onSave: () async {
                            // setState(() {
                            //   _isBusy = true;
                            // });

                            Navigator.of(context).push(
                              MaterialPageRoute(
                                builder: (BuildContext context) {
                                  return CctvOkScreen();
                                },
                              ),
                            );

                            // context.goNamed(CctvOkScreen.routeName,extra: PostModel());
                            //
                            // // 다른 페이지로 이동하도록 설정
                            // GoRouter.of(context).go('/restricted-page');
                          },
                        ),
                      );
                    },
                    type: ButtonType.fill,
                    text: '제출',
                  ),
                ],
              ),
            )));
  }

  _renderSection({required String title, required String value}) {
    final theme = ref.watch(themeServiceProvider);

    return Padding(
      padding: const EdgeInsets.symmetric(
        vertical: 10.0,
      ),
      child: Row(
        children: [
          Text(
            title,
            style: theme.typo.subtitle1.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          Spacer(),
          Text(value, style: theme.typo.subtitle1),
        ],
      ),
    );
  }
}

class _AgreeNoWidget extends ConsumerStatefulWidget {
  const _AgreeNoWidget(
      {required this.agreeNoValue, required this.onChanged, Key? key})
      : super(key: key);
  final void Function(int? value) onChanged;
  final int? agreeNoValue;

  @override
  ConsumerState<_AgreeNoWidget> createState() => _AgreeNoWidgetState();
}

class _AgreeNoWidgetState extends ConsumerState<_AgreeNoWidget> {
  @override
  Widget build(BuildContext context) {
    final theme = ref.watch(themeServiceProvider);

    return Column(
      children: [
        CustomBorder(
          child: Padding(
            padding: const EdgeInsets.symmetric(
              horizontal: 15.0,
              vertical: 20.0,
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '동의안함을 선택하셨습니다. 아래 항목에서 사유를 선택해주세요.',
                  style: theme.typo.headline4.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(
                  height: 15,
                ),
                _renderRadioTile(
                  title: '응급환자를 수술하는 경우',
                  value: 1,
                  groupValue: widget.agreeNoValue,
                  onChanged: widget.onChanged,
                ),
                _renderRadioTile(
                  title: '생명에 위협이 되거나 신체기능의 장애를 초래하는 질환을 가진 경우',
                  value: 2,
                  groupValue: widget.agreeNoValue,
                  onChanged: widget.onChanged,
                ),
                _renderRadioTile(
                  title: '상급종합병원 지정 기준에서 정하는 전문 진료 질병군에 해당하는 수술을 하는 경우',
                  value: 3,
                  groupValue: widget.agreeNoValue,
                  onChanged: widget.onChanged,
                ),
                _renderRadioTile(
                  title: '전공의의 수련을 현저히 저해할 우려가 있다고 판단하는 경우',
                  value: 4,
                  groupValue: widget.agreeNoValue,
                  onChanged: widget.onChanged,
                ),
                _renderRadioTile(
                  title: '수술 시행 직전 촬영이 기술적으로 어려운 시점에 환자나 보호자가 촬영을 요청하는 경우',
                  value: 5,
                  groupValue: widget.agreeNoValue,
                  onChanged: widget.onChanged,
                ),
                _renderRadioTile(
                  title: '천재지변, 통신장애, 사이버 공격 기타 불가항력적 사유로 촬영이 불가능한 경우',
                  value: 6,
                  groupValue: widget.agreeNoValue,
                  onChanged: widget.onChanged,
                ),
              ],
            ),
          ),
        ),
        const SizedBox(
          height: 15,
        ),
      ],
    );
  }

  _renderRadioTile(
      {required String title,
      required int? groupValue,
      required int value,
      required Function(int? value) onChanged}) {
    final theme = ref.watch(themeServiceProvider);

    return RadioListTile(
      title: Text(
        title,
        style: theme.typo.subtitle1,
      ),
      value: value,
      groupValue: groupValue,
      onChanged: onChanged,
      fillColor:
          MaterialStateColor.resolveWith((states) => theme.color.primary),
    );
  }
}

// onPopPage: (route, result) {
// if (!route.didPop(result)) {
// return false;
// }
// // 페이지를 떠날 때 처리할 내용이 있다면 여기에 추가
// return true;
